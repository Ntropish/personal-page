h1.project-title
    a.project-link(href="http://obscure-meadow-6240.herokuapp.com/") Nightlife Management App
h4.project-prompt
    | In this project a "nightlife-coordination" app was reverse engineered. Check out the details
    | of the prompt#{' '}
    a(href="http://www.freecodecamp.com/challenges/basejump-build-a-nightlife-coordination-app") here.
a.project-image-link(href="http://obscure-meadow-6240.herokuapp.com/")
    img.project-image(src="resources/img/project-images/nightlife.jpg")
a.source-link(href="https://github.com/Ntropish/oak-smoke-nightlife")
    h3 View the source here.
p.project-summary
    p This app shows any user the bars nearby based on HTML5 geolocation
        | and also shows the number of authenticated users saying they will attend each venue.
        | Authenticated users get an additional button next to each bar allowing them to
        | indicate to the app that they will be attending.
div.objectives
    h2 Learning Objectives and Accomplishments
    p The primary purpose for this project was to refine back-end skills learned in the previous project and to
        | add a few new pieces of technology to my skill set.
div.learned
    p Based on my observations from the last project, the voting app, I made sure to
        | thoroughly separate the client and server sides of the application. The initial
        | API was developed entirely before any client side work was done.

    p Encryption to protect passwords in the database with Bcrypt was added. So a new technology
        | was learned. But more importantly, because of encryption's asynchronous nature, I
        | found the need to abandon "console.log()" debugging almost entirely because it ends
        | up being ineffective. Debuggers really aren't that complicated and it only took the
        | reading of an article or two to get into them correctly. No longer will I look over
        | my shoulder as I type multitudes of print statements while hoping nobody is watching.

    p Another thing learned from adding encryption is that levels of callbacks can pile up fast.
        | Encryption was just another of those levels which happened to hit the tipping point
        | of making code difficult to reason about. Any further nesting of callbacks would
        | have warranted a refactor. So, I have been reading up on some asynchronous libraries
        | and look forward to using async.js in the future.

    p This was also my first project to use Angular. As others have said, it was very
        | easy to get into. There was some difficulty learning that $scope.$apply() had to
        | surround functions in an ajax call. It felt a little silly doing this because it
        | creates triply nested functions in ones ajax where only the deepest function has any expressions.
        | Async.js will end up being very helpful in these situations.

    p I ended up needing SASS finally. Previously I avoided any libraries that were just crutches
        | for myself as a new developer. But this time I had a situation where I was using one
        | base color and many slight variations in shade and tint for making elements look like
        | buttons and tabs or just making the page feel "active" with different styling on mouseovers.
        | I knew that if I ever wanted to change the base color all of these color variations would
        | have to be remade and switched out in all of their varying locations. So before I got too
        | far into styling I switched everything out for SASS. Now using variables and SASS's
        | lighten() and darken() I can change the entire color scheme by modifying a single variable.

    p Using SASS effectively requires a task runner. Now I use gulp. Since I'm using gulp now
        | I also minify and uglify all of my resources which should add efficiency and speed to
        | deployed apps once I make something large, or just long, enough for that to matter.

    p With the better structuring of my app I saw how testing could be done much easier and so
        | some experimentation was done with Mocha. As to not introduce myself to too many new
        | technologies at once I didn't use tests during development this time. But, I did add
        | a test before wrapping up this project so I'll know how to use them next time. Yes, the
        | one test I did add found a fatal bug immediately. I must use them thoroughly from now on.


div.weaknesses
    h2 Weaknesses

    p This project could have been improved by putting more effort into planning.
        | The layout of the page is fairly simple so I thought it would be fine
        | to do the styling out of a vague idea I had in my head for what I wanted.
        | But, ultimately I was unhappy with the way the design turned out and a mock-up
        | or two could have fixed that.

    p Another thing planning could have accomplished is a cleaner API.
        | If I would have known that any successful POST to register a new user would
        | result in an immediate POST to login then I could have provided an option
        | to do both at once.
    p Also, after getting everything working in the client
        | and server sides I went back to add encryption to the database. This additional
        | async code in the register function revealed an bug.
        | Looking back at the code now I see exactly what I would have to do to fix this.
        | However, at the time I was struggling to get my first deployment to Heroku working
        | and quickly changed my Angular code to direct the user to log in after registering.
        | This added a delay at the cost of convenience to the user. Definitely a weakness.
